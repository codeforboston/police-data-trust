openapi: "3.0.3"
info:
  title: "Complaints"
  description: "API Description"
  version: "0.7.0"
servers:
  - url: "http://127.0.0.1:5001/api/v1"
    description: "Development environment"
  - url: "https://dev.nationalpolicedata.org/api/v1"
    description: "Staging environment"
  - url: "https://api.nationalpolicedata.org"
    description: "Production environment"
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
security:
  - bearerAuth: []
tags:
  - name: "Complaints"
    description: "Manage Complaints"
  - name: "Allegations"
    description: "Manage Allegations"
  - name: "Investigations"
    description: "Manage Investigations"
  - name: "Penalties"
    description: "Manage Penalties"
paths:
  /complaints:
    post:
      tags: 
        - "Complaints"
      summary: "Create Complaint"
      operationId: "createComplaint"
      description: >
        Create a single complaint. User must be a
        contributor to create an complaint.
      requestBody:
        description: "Complaint object that needs to be added to the database"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateComplaint"
      responses:
        '200':
          description: "A JSON array of user names"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '409':
          $ref: '../common/error.yaml#/components/responses/conflictError'
    get:
      tags: 
        - "Complaints"
      summary: "Get Complaints"
      operationId: "getComplaints"
      description: >
       Returns all complaints in the database. Filters can be applied
       to narrow down the results.
      parameters:
        - $ref: '../common/pagination.yaml#/components/parameters/page'
        - $ref: '../common/pagination.yaml#/components/parameters/per_page'
        - $ref: '#/components/parameters/source_uid'
        - $ref: '#/components/parameters/source_type'
        - $ref: '#/components/parameters/officers_involved'
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/reason_for_contact'
        - $ref: '#/components/parameters/outcome_of_contact'
        - $ref: '#/components/parameters/date_gte'
        - $ref: '#/components/parameters/date_lte'
      responses:
        '200':
          description: "A JSON array of complaint objects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComplaintList"
        "401":
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
  /complaints/latest:
    get:
      tags: 
        - "Complaints"
      summary: "Latest Complaint Updates"
      operationId: "getLatestComplaints"
      description: >
        Returns the most recently updated or added complaints.
      parameters:
        - $ref: '../common/pagination.yaml#/components/parameters/page'
        - $ref: '../common/pagination.yaml#/components/parameters/per_page'
      responses:
        '200':
          description: "A JSON array of complaint objects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ComplaintList"
        "401":
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
  /complaints/{complaint_uid}:
    get:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Complaints"
      summary: "Get Complaint"
      operationId: "getComplaint"
      description: >
        Returns information about a single complaint.
      responses:
        '200':
          description: "A complaint object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
    patch:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Complaints"
      summary: "Update Complaint"
      operationId: "updateComplaint"
      description: >
        Update a single complaint. Only an admin of the contributing
        organization or the original user who submitted the complaint
        can update the complaint.
      requestBody:
        description: "Complaint object that needs to be updated in the database"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateComplaint"
      responses:
        '200':
          description: "A complaint object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Complaint"
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError' 
  /complaints/{complaint_uid}/allegations:
    get:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Allegations"
      summary: "Get Allegations for Complaint"
      operationId: "getComplaintAllegations"
      description: >
        Returns all allegations associated with a single complaint.
      responses:
        '200':
          description: "A JSON array of allegation objects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllegationList"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
    post:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Allegations"
      summary: "Create Allegation for Complaint"
      operationId: "createComplaintAllegation"
      description: >
        Create a single allegation associated with a complaint. User must have
        publisher permission in the organization that created the complaint in
        order to add an allegation.
      requestBody:
        description: "Allegation object that needs to be added to the database"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAllegation"
      responses:
        '200':
          description: "An allegation object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Allegation"
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
  /complaints/{complaint_uid}/allegations/{allegation_uid}:
    get:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
        - name: allegation_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Allegations"
      summary: "Get Allegation for Complaint"
      operationId: "getComplaintAllegation"
      description: >
        Returns information about a single allegation associated with a complaint.
      responses:
        '200':
          description: "An allegation object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Allegation"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
    patch:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
        - name: allegation_uid
          in: path
          required: true
          schema:
            type: string
      tags:
        - "Allegations"
      summary: "Update Allegation for Complaint"
      operationId: "updateComplaintAllegation"
      description: >
        Update a single allegation associated with a complaint. The user must
        have publishing permission in the organization that submitted the
        complaint to update the allegation.
      requestBody:
        description: "Allegation object that needs to be updated in the database"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAllegation"
      responses:
        '200':
          description: "An allegation object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Allegation"
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
    delete:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
        - name: allegation_uid
          in: path
          required: true
          schema:
            type: string
      tags:
        - "Allegations"
      summary: "Delete Allegation for Complaint"
      operationId: "deleteComplaintAllegation"
      description: >
        Delete a single allegation associated with a complaint. The user must
        have publishing permission in the organization that submitted the
        complaint to delete the allegation.
      responses:
        '204':
          description: "No Content"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
  /complaints/{complaint_uid}/investigations:
    get:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Investigations"
      summary: "Get Investigations for Complaint"
      operationId: "getComplaintInvestigations"
      description: >
        Returns all investigations associated with a single complaint.
      responses:
        '200':
          description: "A JSON array of investigation objects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvestigationList"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
    post:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Investigations"
      summary: "Get Investigations for Complaint"
      operationId: "createComplaintInvestigation"
      description: >
        Creates a new investigation associated with a single complaint.
      requestBody:
        description: "Investigation object that needs to be added to the database"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInvestigation"
      responses:
        '201':
          description: "A JSON investigation objects"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Investigation"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
  /complaints/{complaint_uid}/investigations/{investigation_uid}:
    get:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
        - name: investigation_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Investigations"
      summary: "Get Investigation for Complaint"
      operationId: "getComplaintInvestigation"
      description: >
        Returns information about a single investigation associated with a complaint.
      responses:
        '200':
          description: "An investigation object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Investigation"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
    patch:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
        - name: investigation_uid
          in: path
          required: true
          schema:
            type: string
      tags:
        - "Investigations"
      summary: "Update Investigation for Complaint"
      operationId: "updateComplaintInvestigation"
      description: >
        Update a single investigation associated with a complaint. The user must
        have publishing permission in the organization that submitted the
        complaint to update the investigation.
      requestBody:
        description: "Investigation object that needs to be updated in the database"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInvestigation"
      responses:
        '200':
          description: "An investigation object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Investigation"
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
    delete:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
        - name: investigation_uid
          in: path
          required: true
          schema:
            type: string
      tags:
        - "Investigations"
      summary: "Delete Investigation for Complaint"
      operationId: "deleteComplaintInvestigation"
      description: >
        Delete a single investigation associated with a complaint. The user must
        have publishing permission in the organization that submitted the
        complaint to delete the investigation.
      responses:
        '204':
          description: "No Content"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
  /complaints/{complaint_uid}/penalties:
    get:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Penalties"
      summary: "Get Penalties for Complaint"
      operationId: "getComplaintPenalties"
      description: >
        Returns all penalties associated with a single complaint.
      responses:
        '200':
          description: "A JSON array of penalty objects"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PenaltyList"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
    post:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
      tags: 
        - "Penalties"
      summary: "Create Penalty for Complaint"
      operationId: "createComplaintPenalty"
      description: >
        Create a single penalty associated with a complaint. User must have
        publisher permission in the organization that created the complaint in
        order to add a penalty.
      requestBody:
        description: "Penalty object that needs to be added to the database"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePenalty"
      responses:
        '201':
          description: "A JSON penalty object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Penalty"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
  /complaints/{complaint_uid}/penalties/{penalty_uid}:
    get:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
        - name: penalty_uid
          in: path
          required: true
          schema:
            type: string
      tags:
        - "Penalties"
      summary: "Get Penalty for Complaint"
      operationId: "getComplaintPenalty"
      description: >
        Returns a single penalty associated with a complaint.
      responses:
        '200':
          description: "A JSON penalty object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Penalty"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
    patch:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
        - name: penalty_uid
          in: path
          required: true
          schema:
            type: string
      tags:
        - "Penalties"
      summary: "Update Penalty for Complaint"
      operationId: "updateComplaintPenalty"
      description: >
        Update a single penalty associated with a complaint. The user must
        have publishing permission in the organization that submitted the
        complaint to update the penalty.
      requestBody:
        description: "Penalty object that needs to be updated in the database"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePenalty"
      responses:
        '200':
          description: "A JSON penalty object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Penalty"
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
    delete:
      parameters:
        - name: complaint_uid
          in: path
          required: true
          schema:
            type: string
        - name: penalty_uid
          in: path
          required: true
          schema:
            type: string
      tags:
        - "Penalties"
      summary: "Delete Penalty for Complaint"
      operationId: "deleteComplaintPenalty"
      description: >
        Delete a single penalty associated with a complaint. The user must
        have publishing permission in the organization that submitted the
        complaint to delete the penalty.
      responses:
        '204':
          description: "No Content"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
        '403':
          $ref: '../common/error.yaml#/components/responses/forbiddenError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    source_uid:
      name: source
      in: query
      description: "Filter by the source of the complaint. This should be the UID of the source."
      required: false
      schema:
        type: string
    source_type:
      name: source_type
      in: query
      description: >
        Filter by the type of source. This should be a comma separated list of source types. The valid
        source types are 'legal', 'personal', 'news', and 'government'.
      required: false
      schema:
        type: string
    officers_involved:
      name: officers_involved
      in: query
      description: >
        Filter by the officers involved in the complaint. This should be a comma separated list of officer UIDs.
      required: false
      schema:
        type: string
    category:
      name: category
      in: query
      description: "Filter by the category of the complaint."
      required: false
      schema:
        type: string
    reason_for_contact:
      name: reason_for_contact
      in: query
      description: "Filter by the reason for contact."
      required: false
      schema:
        type: string
    outcome_of_contact:
      name: outcome_of_contact
      in: query
      description: "Filter by the outcome of contact."
      required: false
      schema:
        type: string
    date_gte:
      name: date_gte
      in: query
      description: "Only return complaints that occurred or were received after the selected date. This should be a date in the format YYYY-MM-DD."
      required: false
      schema:
        type: string
        format: date
    date_lte:
      name: date_lte
      in: query
      description: "Only return complaints that occurred or were received before the selected date. This should be a date in the format YYYY-MM-DD."
      required: false
      schema:
        type: string
        format: date
  schemas:
    BaseComplaint:
      type: "object"
      description: "Base complaint object"
      properties:
        record_id:
          type: string
          description: The ID that was given to this complaint by the orginal source of the data.
        source_details:
          $ref: '#/components/schemas/SourceDetails'
        category:
          type: "string"
          description: "The category of the complaint."
        incident_date:
          type: "string"
          format: "date-time"
          description: "The date and time the incident occurred."
        received_date:
          type: "string"
          format: "date-time"
          description: "The date and time the complaint was received by the reporting source."
        closed_date:
          type: "string"
          format: "date-time"
          description: "The date and time the complaint was closed."
        location:
          type: object
          properties:
            location_type:
              type: "string"
              description: >
                The type of location where the incident occurred. For example,
                Bar, Residence, or Highway.
            location_description:
              type: "string"
              description: "A description of the location where the incident occurred."
            address:
              type: "string"
              description: "The street address where the incident occurred."
            city:
              type: "string"
              description: "The city where the incident occurred."
            state:
              type: "string"
              description: "The state where the incident occurred."
            zip:
              type: "string"
              description: "The zip code where the incident occurred."
            administrative_area:
              type: "string"
              description: >
                The name of the administrative area where the incident occurred.
                For example, 23rd Precinct or Beat 12.
            administrative_area_type:
              type: "string"
              description: >
                The type of area designation for determining responsibility.
                For example, Precinct or Beat.
        reason_for_contact:
          type: "string"
          description: "The reason for the contact."
        outcome_of_contact:
          type: "string"
          description: "The outcome of the contact."
        civilian_witnesses:
          type: array
          description: "The civilian witnesses associated with the complaint."
          items: 
            $ref: "#/components/schemas/Civilian"
        attachements:
          type: "array"
          description: "Documents and multimeida associated with the complaint."
          items:
            $ref: "#/components/schemas/Attachments"
    CreateComplaint:
      allOf: 
        - $ref: "#/components/schemas/BaseComplaint"
        - type: object
          properties:
            source_uid:
              type: "string"
              description: "The UID of the source that reported the complaint."
            civilian_review_board_uid:
              type: "string"
              description: "The UID of the civilian review board that reviewed the complaint."
            police_witnesses:
              type: "array"
              description: "The UID of any police witnesses associated with the complaint."
              items:
                type: "string"
            allegations:
              type: "array"
              description: "The allegations associated with the complaint."
              items:
                $ref: "#/components/schemas/CreateAllegation"
            investigations:
              type: "array"
              description: "The investigations associated with the complaint."
              items:
                $ref: "#/components/schemas/CreateInvestigation"
            penalties:
              type: "array"
              description: "The penalties associated with the complaint."
              items:
                $ref: "#/components/schemas/CreatePenalty"
    UpdateComplaint:
      allOf: 
        - $ref: "#/components/schemas/BaseComplaint"
        - type: object
          properties:
            civilian_review_board_uid:
              type: "string"
              description: "The UID of the civilian review board that reviewed the complaint."
            police_witnesses:
              type: "array"
              description: "The uid of any police witnesses associated with the complaint."
              items:
                type: "string"
            allegations:
              type: "array"
              description: "The allegations associated with the complaint."
              items:
                $ref: "#/components/schemas/CreateAllegation"
            investigations:
              type: "array"
              description: "The investigations associated with the complaint."
              items:
                $ref: "#/components/schemas/CreateInvestigation"
            penalties:
              type: "array"
              description: "The penalties associated with the complaint."
              items:
                $ref: "#/components/schemas/CreatePenalty"

    Complaint:
      allOf:
        - $ref: "#/components/schemas/BaseComplaint"
        - type: "object"
          required:
            - uid
            - created_at
            - updated_at
            - source_uid
            - category
            - incident_date
            - received_date
            - location
            - allegations
            - penalties
            - investigations
            - police_witnesses
            - civilian_witnesses
          properties:
            uid:
              type: "string"
              description: "Unique identifier for the complaint."
            created_at:
              type: "string"
              format: "date-time"
              description: "Date and time the complaint was created."
            updated_at:
              type: "string"
              format: "date-time"
              description: "Date and time the complaint was last updated."
            source:
              allOf: 
                - $ref: sources.yaml#/components/schemas/Source
                - type: "object"
                  description: "The source that reported the complaint."
            civilian_review_board:
              allOf: 
                -  $ref: '#/components/schemas/ReviewBoard'
                - type: "object"
                  description: "The civilian review board that reviewed the complaint."
            police_witnesses:
              type: "array"
              description: "The police witnesses associated with the complaint."
              items:
                $ref: officers.yaml#/components/schemas/Officer
            allegations:
              type: "array"
              description: "The allegations associated with the complaint."
              items:
                $ref: "#/components/schemas/Allegation"
            investigations:
              type: "array"
              description: "The investigations associated with the complaint."
              items:
                $ref: "#/components/schemas/Investigation"
            penalties:
              type: "array"
              description: "The penalties associated with the complaint."
              items:
                $ref: "#/components/schemas/Penalty"
    ComplaintList:
      allOf: 
        - $ref: '../common/pagination.yaml#/components/schemas/PaginatedResponse'
        - type: "object"
          properties:
            results:
              type: "array"
              description: "List of complaints."
              items:
                $ref: "#/components/schemas/Complaint"
    BaseAllegation:
      type: "object"
      properties:
        record_id:
          type: string
          description: The ID that was given to this allegation by the orginal source of the data.
        complainant:
          allOf: 
            -  $ref: "#/components/schemas/Civilian"
            - type: "object"
              description: "Demographic information of the individual who filed the complaint."
        allegation:
          type: "string"
          description: "The allegation made by the complainant."
        type:
          type: string
          description: The type of allegation.
        subtype:
          type: string
          description: The sub type of the allegation.
        recommended_finding:
          type: "string"
          description: "The finding recommended by the review board."
        recommended_outcome:
          type: "string"
          description: "The outcome recommended by the review board."
        finding:
          type: "string"
          description: "The legal finding."
        outcome:
          type: "string"
          description: "The final outcome of the allegation."
    CreateAllegation:
      allOf: 
        - $ref: "#/components/schemas/BaseAllegation"
        - type: object
          properties:
            perpetrator_uid:
              type: "string"
              description: "The UID of the officer the allegation is made against."
    Allegation:
      allOf: 
        - $ref: "#/components/schemas/BaseAllegation"
        - type: "object"
          properties:
            uid:
              type: "string"
              description: "Unique identifier for the allegation."
            accused:
              allOf: 
                - $ref: officers.yaml#/components/schemas/Officer
                - type: "object"
                  description: The officer who the allegation is made against.
    AllegationList:
      allOf: 
        - $ref: '../common/pagination.yaml#/components/schemas/PaginatedResponse'
        - type: "object"
          properties:
            results:
              type: "array"
              description: "List of allegations."
              items:
                $ref: "#/components/schemas/Allegation"
    BasePenalty:
      type: "object"
      properties:
        penalty:
          type: string
          description: "The penalty imposed."
        crb_plea:
          type: string
          description: "The plea entered by the officer in response to the penalty."
        crb_case_status:
          type: string
          description: "The status of the civilian review board case related to the penalty."
        crb_disposition:
          type: string
          description: "The disposition of the civilian review board case related to the penalty."
        agency_disposition:
          type: string
          description: "The disposition of the agency related to the penalty."
        date_assessed:
          type: string
          format: date
    Penalty:
      allOf: 
        - $ref: "#/components/schemas/BasePenalty"
        - type: "object"
          properties:
            uid:
              type: "string"
              description: "Unique identifier for the penalty."
            officer:
              allOf: 
                - $ref: officers.yaml#/components/schemas/Officer
                - type: "object"
                  description: "The officer who suffered the penalty."
    CreatePenalty:
      allOf: 
        - $ref: "#/components/schemas/BasePenalty"
        - type: "object"
          properties:
            officer_uid:
              type: "string"
              description: "The UID of the officer the penalty is associated with."
            description:
              type: "string"
              description: "A description of the penalty."
    PenaltyList:
      allOf: 
        - $ref: '../common/pagination.yaml#/components/schemas/PaginatedResponse'
        - type: "object"
          properties:
            results:
              type: "array"
              description: "List of penalties."
              items:
                $ref: "#/components/schemas/Penalty"
    BaseInvestigation:
      type: object
      properties:
        start_date:
          type: "string"
          format: "date-time"
          description: "The date the investigation started."
        end_date:
          type: "string"
          format: "date-time"
          description: "The date the investigation ended."
    CreateInvestigation:
      allOf: 
        - $ref: "#/components/schemas/BaseInvestigation"
        - type: object
          properties:
            investigator_uid:
              type: "string"
              description: "The UID of the officer who performed the investigation."
    Investigation:
      allOf: 
        - $ref: "#/components/schemas/BaseInvestigation"
        - type: "object"
          properties:
            uid:
              type: "string"
              description: "Unique identifier for the investigation."
            investigator:
              allOf: 
                - $ref: officers.yaml#/components/schemas/Officer
                - type: "object"
                  description: "The officer who performed the investigation."
    InvestigationList:
      allOf: 
        - $ref: '../common/pagination.yaml#/components/schemas/PaginatedResponse'
        - type: "object"
          properties:
            results:
              type: "array"
              description: "List of investigations."
              items:
                $ref: "#/components/schemas/Investigation"
    Civilian:
      type: "object"
      properties:
        age:
          type: "string"
          description: "Age range of the individual."
        age_range:
          type: "string"
          description: "The age range of the individual."
        ethnicity:
          type: "string"
          description: "The ethnicity of the individual."
          enum:
            - American Indian or Alaska Native
            - Asian
            - Black or African American
            - Hispanic or Latino
            - Native Hawaiian or Other Pacific Islander
            - White
        gender:
          type: "string"
          description: The gender of the individual.
          enum:
            - Male
            - Female
            - Other
    ReviewBoard:
      type: "object"
      properties:
        uid:
          type: "string"
          description: "Unique identifier for the review board."
        name:
          type: "string"
          description: "The name of the review board."
        city:
          type: "string"
          description: "The city the review board is located in."
        state:
          type: "string"
          description: "The state the review board is located in."
        url:
          type: string
          description: The website URL for the review board.
    Attachments:
      type: "object"
      properties:
        filetype:
          type: "string"
          description: "The type of attachment."
        url:
          type: "string"
          description: "The url where the attachment can be accessed."
        title:
          type: "string"
          description: "The name of the attachment."
    SourceDetails:
      oneOf: 
        - $ref: '#/components/schemas/LegalCaseEvent'
        - $ref: '#/components/schemas/PersonalAccount'
        - $ref: '#/components/schemas/NewsReport'
        - $ref: '#/components/schemas/GovernmentRecord'
      discriminator: 
        propertyName: record_type
        mapping:
          Legal Case Event: '#/components/schemas/LegalCaseEvent'
          Personal Account: '#/components/schemas/PersonalAccount'
          News Report: '#/components/schemas/NewsReport'
          Government Record: '#/components/schemas/GovernmentRecord'
      type: "object"
      properties:
        record_type:
          type: "string"
          description: "The type of record the complaint is associated with."
          enum:
            - Legal Action
            - Personal Account
            - News Report
            - Government Record
    LegalCaseEvent:
      type: "object"
      properties:
        record_type:
          type: "string"
          description: "The type of record the complaint is associated with."
          enum:
            - Legal Case Event
        court:
          type: "string"
          description: "The court the legal action was filed in."
        judge:
          type: "string"
          description: "The judge who presided over the case."
        docket_number:
          type: "string"
          description: "The docket number of the case."
        event_summary:
          type: "string"
          description: "A summary of the event."
        date_of_event:
          type: "string"
          format: "date-time"
          description: "The date the legal action was filed."
    PersonalAccount:
      type: "object"
      properties:
        record_type:
          type: "string"
          description: "The type of record the complaint is associated with."
          enum:
            - Personal Account
    GovernmentRecord:
      type: "object"
      properties:
        record_type:
          type: "string"
          description: "The type of record the complaint is associated with."
          enum:
            - Government Record
        reporting_agency:
          type: "string"
          description: "The agency that reported the record."
        reporting_agency_url:
          type: "string"
          description: "The url of the agency that reported the record."
        reporting_agency_email:
          type: "string"
          description: "The email of the agency that reported the record."
    NewsReport:
      type: "object"
      properties:
        record_type:
          type: "string"
          description: "The type of record the complaint is associated with."
          enum:
            - News Report
        publication_name:
          type: "string"
          description: "The name of the publication."
        publication_date:
          type: "string"
          format: "date-time"
          description: "The date the publication was released."
        publication_url:
          type: "string"
          description: "The url of the publication."
        author:
          type: "string"
          description: "The author of the publication."
        author_url:
          type: "string"
          description: "The url of the author."
        author_email:
          type: "string"
          description: "The email of the author."
