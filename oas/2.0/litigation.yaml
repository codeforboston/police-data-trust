openapi: "3.0.3"
info:
  title: "Litigation"
  description: "API Description"
  version: "0.7.0"
servers:
  - url: "http://127.0.0.1:5001/api/v1"
    description: "Development environment"
  - url: "https://dev.nationalpolicedata.org/api/v1"
    description: "Staging environment"
  - url: "https://api.nationalpolicedata.org"
    description: "Production environment"
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
security:
  - bearerAuth: []
tags:
  - name: "Litigation"
    description: "Litigation API"
  - name: "Documents"
    description: "Document API"
paths:
  /litigation:
    get:
      tags:
        - "Litigation"
      summary: "Get all Litigation"
      operationId: "getLitigation"
      description: >
        Get a list of all litigation cases. You can use query parameters to filter the results by
        including by forum, the officers involved, or the date range.
        This endpoint supports
        pagination to limit the number of results returned.
      parameters:
        - $ref: '../common/pagination.yaml#/components/parameters/page'
        - $ref: '../common/pagination.yaml#/components/parameters/per_page'
        - name: "court_level"
          in: "query"
          description: "Filter by court level"
          schema:
            type: "string"
        - name: "jurisdiction"
          in: "query"
          description: "Filter by jurisdiction"
          schema:
            type: "string"
        - name: "state"
          in: "query"
          description: "Filter by state"
          schema:
            type: "string"
        - name: defendants
          in: "query"
          description: >
            Filter by defendants. Include a comma seperated list
            of the IDs of the officers whos cases you want returned.
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/LitigationList"
        "401":
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
    post:
      tags:
        - "Litigation"
      summary: "Create new Litigation"
      operationId: "createLitigation"
      description: >
        Create a new litigation case. This endpoint requires a
        case title and docket number to be provided. User must
        be a contributor to create a litigation record.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateLitigation"
      responses:
        '201':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Litigation'
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
  /litigation/latest:
    get:
      tags:
        - "Litigation"
      summary: "Latest Litigation Updates"
      operationId: "getLatestLitigation"
      description: >
        Get a list of the most recently updated or added litigation cases.
      parameters:
        - $ref: '../common/pagination.yaml#/components/parameters/page'
        - $ref: '../common/pagination.yaml#/components/parameters/per_page'
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/LitigationList"
        "401":
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
  /litigation/{uid}:
    parameters:
      - name: uid
        in: path
        description: ID of the litigation
        required: true
        schema:
          type: string
    get:
      tags:
        - "Litigation"
      summary: "Get Litigation by ID"
      operationId: "getLitigationById"
      description: >
        Retrieve a single litigation case by ID.
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Litigation"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
    patch:
      tags:
        - "Litigation"
      summary: "Update Litigation"
      operationId: "UpdateLitigation"
      description: >
        Update an existing litigation case. The user must be a
        contributor to update a litigation record.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateLitigation"
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Litigation"
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
    delete:
      tags:
        - "Litigation"
      summary: "Delete Litigation by ID"
      operationId: "deleteLitigationById"
      description: >
        Delete a single litigation case by ID. The user must be a
        contributor from the same organization that initially submitted
        a litigation record to delete it.
      responses:
        "204":
          description: "No content"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
  /litigation/{uid}/documents:
    parameters:
      - name: "uid"
        in: "path"
        description: "ID of the litigation"
        required: true
        schema:
          type: string
    get:
      tags:
        - "Documents"
      summary: "Get Documents"
      operationId: "getLitigationDocuments"
      description: >
        Get a list of documents associated with a litigation.
      parameters:
        - $ref: '../common/pagination.yaml#/components/parameters/page'
        - $ref: '../common/pagination.yaml#/components/parameters/per_page'
      responses:
        "200":
          description: "Successful response"
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/DocumentList"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
    post:
      tags:
        - "Documents"
      summary: "Add Document"
      operationId: "createLitigationDocument"
      description: >
        Add a new document to a litigation.
      parameters:
        - name: "uid"
          in: "path"
          description: "ID of the litigation"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocument"
      responses:
        '201':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
  /litigation/{uid}/documents/{document_uid}:
    parameters:
      - name: "uid"
        in: "path"
        description: "ID of the Litigation"
        required: true
        schema:
          type: string
      - name: "document_uid"
        in: "path"
        description: "ID of the document"
        required: true
        schema:
          type: string
    get:
      summary: "Get Document by ID"
      operationId: "getDocumentById"
      description: >
        Retrieve a single document associated with a litigation.
      tags:
        - "Documents"
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
  /litigation/{uid}/disposition:
    parameters: 
      - name: uid
        in: path
        description: ID of the litigation
        required: true
        schema:
          type: string
    post:
      tags:
        - "Litigation"
      summary: "Add Disposition"
      operationId: "createDisposition"
      description: >
        Add a new disposition to a litigation.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Disposition"
      responses:
        '200':
          description: 'Successful response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Litigation'
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
        '401':
          $ref: '../common/error.yaml#/components/responses/unauthorizedError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Disposition:
      type: "object"
      properties:
        disposition:
          type: "string"
          description: >
            The disposition of the litigation.
        desceripton:
          type: "string"
          description: >
            A description of the disposition. This could include
            the terms of a settlement, the amount of a judgment,
            or other relevant information.
        date:
          type: "string"
          format: "date"
          description: >
            The date when this disposition was reached.
      required: 
        -  disposition
        -  date
    BaseLitigation:
      type: "object"
      properties:
        case_title:
          type: "string"
          description: >
            The case title or caption for this litigation. Should
            contain the names of the parties involved.
        docket_number:
          type: "string"
          description: >
            The docket number for this litigation. This is the
            unique identifier for the case in the court system.
        court_level:
          type: "string"
          description: >
            The level of the court where this litigation is being
            heard. This could be a state court, federal court, or
            other court system.
        jurisdiction:
          type: "string"
          description: >
            The geographical or subject matter jurisdiction (e.g., 
            Eastern District, Northern District, County name for 
            state courts) of the court where litigation is being
            heard.
        state:
          type: "string"
          description: >
            The state where this litigation is being heard. This
            should be the two-letter abbreviation for the state.
        description:
          type: "string"
          description: >
            A description of the litigation. This could include
            a summary of the case, the legal issues involved, or
            other relevant information.
        start_date:
          type: "string"
          format: "date"
          description: >
            The date when this litigation was filed or initiated.
        dispositions:
          type: "array"
          description: >
            A list of any dispositions in this litigation. This
            could include a settlement, judgment, or other outcome.
          items:
            $ref: "#/components/schemas/Disposition"
        settlement_amount:
          type: "number"
          description: >
            The amount of any settlement or judgment in this
            litigation. This should be in USD.
        url:
          type: "string"
          format: "uri"
          description: >
            A URL to more information about this litigation. This
            could be a link to a court website such as
            [Court Listener](https://www.courtlistener.com/),
            [PACER](https://www.pacer.gov/), or other legal research
            resources.
    CreateLitigation:
      allOf: 
        - $ref: "#/components/schemas/BaseLitigation"
        - type: object
        - properties: 
            defendants:
              type: "array"
              items:
                type: "string"
              description: >
                A list containing the IDs of any officers who are named
                as defendants in the litigation.
        - required:
          - case_title
          - docket_number
          - defendants
          - court_level
          - jurisdiction
          - state
    UpdateLitigation:
      allOf: 
        - $ref: "#/components/schemas/BaseLitigation"
        - type: object
          properties:
            defendants:
              type: array
              items:
                type: string
              description: >
                A list containing the IDs of any officers who are named
                as defendants in the litigation.
    Litigation:
      allOf: 
        - $ref: "#/components/schemas/BaseLitigation"
        - type: object
          required: 
            - case_title
            - docket_number
            - defendants
            - court_level
            - jurisdiction
            - state
          properties:
            uid:
              type: "string"
              description: "The uid of the litigation"
            documents:
              type: "string"
              description: "A link to retrieve the documents associated with this litigation"
            defendants:
              type: "array"
              description: >
                A list of any officers who are named as defendants in the litigation.
              items:
                $ref: officers.yaml#/components/schemas/Officer
    LitigationList:
      allOf: 
        -  $ref: ../common/pagination.yaml#/components/schemas/PaginatedResponse
        - type: "object"
          properties:
            results:
              type: "array"
              items:
                $ref: "#/components/schemas/Litigation"
    BaseDocument:
      type: "object"
      properties:
        title:
          type: "string"
          description: "The title of the document"
        description:
          type: "string"
          description: "A description of the document"
        url:
          type: "string"
          format: "uri"
          description: "A URL to the document"
    CreateDocument:
      allOf: 
        - $ref: "#/components/schemas/BaseDocument"
        - type: "object"
        - required:
          - title
          - url
    Document:
      allOf: 
        - $ref: "#/components/schemas/BaseDocument"
        - type: "object"
        - required:
          - title
          - url
          - uid
        - properties:
            uid:
              type: "string"
              description: "The uid of the document"
    DocumentList:
      allOf: 
        - $ref: '../common/pagination.yaml#/components/schemas/PaginatedResponse'
        - type: "object"
          properties:
            results:
              type: "array"
              items:
                $ref: "#/components/schemas/Document"
        