openapi: "3.0.3"
info:
  title: "Sources"
  description: "API Description"
  version: "0.1.0"
servers:
  - url: "http://dev-api.nationalpolicedata.org/api/v1"
    description: "Development environment"
  - url: "https://stage-api.nationalpolicedata.org/api/v1"
    description: "Staging environment"
  - url: "https://api.nationalpolicedata.org"
    description: "Production environment"
x-readme:
  explorer-enabled: true
  proxy-enabled: true
  samples-enabled: true
security:
  - bearerAuth: []
tags:
  - name: "Sources"
    description: "Sources API"
paths:
  /sources:
    get:
      tags:
        - "Sources"
      summary: "Get all sources"
      operationId: "getSources"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PartnerList"
    post:
      tags:
        - "Sources"
      summary: "Create a new source"
      operationId: "createPartner"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePartner"
      responses:
        '201':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
  /sources/{uid}:
    parameters: 
      - name: uid
        in: path
        description: UID of the source
        required: true
        schema:
          type: string
    get:
      tags:
        - "Sources"
      summary: "Get Source"
      operationId: "getPartnerById"
      description: >
        Returns a single source.
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
    patch:
      tags:
        - "Sources"
      summary: "Update an existing source"
      operationId: "updatePartner"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePartner"
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          $ref: '../common/error.yaml#/components/responses/validationError'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'
  /sources/{uid}/members:
    parameters: 
      - name: uid
        in: path
        description: UID of the source
        required: true
        schema:
          type: string
    get:
      tags:
        - Sources
      summary: "Get all members"
      operationId: "getMembers"
      description: >
        Returns a list of all users who are members of a source.
      responses:
        '200':
          description: 'Successful operation'
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: '#/components/schemas/MemberList'
        '404':
          $ref: '../common/error.yaml#/components/responses/notFoundError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BasePartner:
      type: "object"
      properties:
        name:
          type: "string"
          description: "Name of the source organization."
        url:
          type: "string"
          description: "Website URL of the source."
        contact_email:
          type: "string"
          description: "Contact email for the source organization."
    CreatePartner:
      allOf:
        - $ref: "#/components/schemas/BasePartner"
        - type: "object"
          required: 
            - name
            - contact_email
    UpdatePartner:
      allOf: 
        -  $ref: "#/components/schemas/BasePartner"
    Source:
      allOf:
        - $ref: "#/components/schemas/BasePartner"
        - type: "object"
          properties:
            uid:
              type: "string"
              description: "Unique identifier for the source."
            members:
              type: string
              description: "Url to get all members of the source."
            reported_complaints:
              type: string
              description: "Url to get all complaints reported by the source."
    PartnerList:
      allOf:
        - $ref: '../common/pagination.yaml#/components/schemas/PaginatedResponse'
        - type: "object"
          properties:
            results:
              type: "array"
              items:
                $ref: "#/components/schemas/Source"
    MemberBase:
      type: "object"
      properties:
        source_uid:
          type: "string"
          description: "Unique identifier for the source."
        user_uid:
          type: "string"
          description: "Unique identifier for the user."
        role:
          type: "string"
          description: "Role of the user."
          enum: [
            "Administrator",
            "Publisher",
            "Member",
            "Subscriber"
          ]
        is_active:
          type: "boolean"
          description: "Whether the user is active."
    Member:
      allOf:
        - $ref: "#/components/schemas/MemberBase"
        - type: "object"
          properties:
            uid:
              type: "string"
              description: "Unique identifier for the user."
            date_joined:
              type: "string"
              format: "date-time"
              description: "Date the user joined the source organizaation."
    AddMember:
      allOf: 
        - $ref: "#/components/schemas/MemberBase"
        - type: "object"
          required: 
            - role
            - user_uid
            - source_uid
    MemberList:
      allOf:
        - $ref: '../common/pagination.yaml#/components/schemas/PaginatedResponse'
        - type: "object"
          properties:
            results:
              type: "array"
              items:
                $ref: "#/components/schemas/Member"
